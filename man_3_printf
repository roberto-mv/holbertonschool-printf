.TH man "10 November 2022" "0.01" "_printf man pagee"
.SH NAME
.B _printf
- A re-creation of the printf function
.SH SYNOPSIS
It is necessary to #include "main.h" header to use the function.
To demonstrate _printf, the example below is used. It is a main function
contained in the file "main.c", located in the test directory that uses
both "_printf" and "printf" to print to the stdout.

.SH DESCRIPTION
The _printf() function produces output according to a format which is further described
below. This function write its output to the stdout, the standard output stream.

.SH FLAGS
The character % is followed by zero or more of the following flags:

.RS 0
%#: The value should be converted to an "alternate form". o conversions, the first character of the output string is made zero (by prefixing a 0 if it was not zero already).

.RS 0
%space: (a space) A blank should be left before a positive number (or empty string) produced by a signed conversion.

.RS 0
%+: A sign (+ or -) should always be placed before a number produced by a signed conversion.  By default, a sign is used only for negative numbers.

.SH USAGE
The following key characters preceeded by % symbol called specifiers are needed to use _printf.

.RS 0
%h: A following integer conversion corresponds to a short or unsigned short argument, or a following n conversion corresponds to a pointer to a short argument.

.RS 0
%(ell) A following integer conversion corresponds to a long or unsigned long argument, or a following n conversion corresponds to a pointer to a long argument, or a following c conversion corresponds to a wint_t argument, or a following s conversion corresponds to a pointer to wchar_t argument.

.RS 0
%S: (Not in C99 or C11, but in SUSv2, SUSv3, and SUSv4.) Synonym for ls.  Don't use.

.RS 0
%o, u, x, X: The unsigned int argument is converted to unsigned octal (o), unsigned decimal (u), or unsigned hexadecimal (x and X) notation.  The letters abcdef are used for x conversions; the letters ABCDEF are used for X conversions.  The precision, if any, gives the minimum number of digits that must appear; if the converted value requires fewer digits, it is padded on the left with zeros.  The default precision is 1.  When 0 is printed with an explicit precision 0, the output is empty.

.RS 0
%c: If no l modifier is present, the int argument is converted to an unsigned char, and the resulting character is written.  If an l modifier is present, the wint_t (wide character) argument is converted to a multibyte sequence by a call to the wcrtomb(3) function, with a conversion state starting in the initial state, and the resulting multibyte string is written.

.RS 0
%s: If no l modifier is present: the const char * argument is expected to be a pointer to an array of character type (pointer to a string).  Characters from the array are written up to (but not including) a terminating null byte ('\0'); if a precision is specified, no more than the number specified are written.  If a precision is given, nonull byte need be present; if the precision is not specified, or is greater than the size of the array, the array must contain a terminating null byte.

.RS 0
%%: A '%' is written.  No argument is converted.  The complete conversion specification is '%%'.

.RS 0
%d, i: The int argument is converted to signed decimal notation. The precision, if any, gives the minimum number of digits that must appear; if the converted value requires fewer digits, it is padded on the left with zeros.  The default precision is 1.  When 0 is printed with an explicit precision 0, the output is empty.

.SH RETURN VALUES
Upon successful return, these functions return the number of characters printed (excluding the null byte used to end output to strings).

.SH EXAMPLE

The command "gcc -Wall -Wextra -Werror -pedantic -Wno-format *.c" should be used to compile.
The main.c file should be in the same directory as _printf and its other supporting functions
before compiling. The example is as follows;
  
alex@ubuntu:~/c/printf$ cat main.c
#include <limits.h>
#include <stdio.h>
#include "main.h"

/**
 * main - Entry point
 *
 * Return: Always 0
 */

int main(void)
{
	int len;
	int len2;


	len = _printf("Let's try to printf a sentence.\n");
	len2 = printf("Let's try to printf a sentence.\n");
     
	_printf("Length:[%d, %i]\n", len, len);
	printf("Length:[%d, %i]\n", len2, len2);
	_printf("Negative:[%d]\n", -9999);
	printf("Negative:[%d]\n", -9999);
	_printf("Character:[%c]\n", 'H');
	printf("Character:[%c]\n", 'H');
	_printf("String:[%s]\n", "I am a string !");
	printf("String:[%s]\n", "I am a string !");
	len = _printf("Percent:[%%]\n");
	len2 = printf("Percent:[%%]\n");
	_printf("Len:[%d]\n", len);
	printf("Len:[%d]\n", len2);
	return (0);
}

alex@ubuntu:~/c/printf$ gcc -Wall -Wextra -Werror -pedantic -Wno-format *.c
alex@ubuntu:~/c/printf$ ./printf
Let's try to printf a simple sentence.
Let's try to printf a simple sentence.
Length:[39, 39]
Length:[39, 39]
Negative:[-9999]
Negative:[-9999]
Character:[H]
Character:[H]
String:[I am a string !]
String:[I am a string !]
Percent:[%]
Percent:[%]
Len:[12]
Len:[12]

.SH SEE ALSO
.I printf(3)

.SH AUTHOR
Roberto Montes
